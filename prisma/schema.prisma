generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(100)
  email         String        @unique @db.VarChar(100)
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  event         Event[]
  account       Account[]
  participate   Participate[]
  Session       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Event {
  id           String        @id @default(uuid())
  joinCode     String        @db.VarChar(6) @unique
  name         String        @db.VarChar(100)
  occuringDays String
  begins       DateTime
  ends         DateTime
  type         eventType
  ownerID      String
  address      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  owner        User          @relation(fields: [ownerID], references: [id])
  participant  Participate[]

  @@index([ownerID])
}

model Participate {
  eventID   String
  userID    String
  timeZone  timeZoneList
  timeSlots TimeSlots[]
  event     Event       @relation(fields: [eventID], references: [id])
  user      User        @relation(fields: [userID], references: [id])

  @@id([eventID, userID])
  @@index([eventID])
  @@index([userID])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TimeSlots {
  id                 String       @id @default(cuid())
  date               DateTime
  begins             DateTime
  ends               DateTime
  participateEventID String?
  participateUserID  String?
  participate        Participate? @relation(fields: [participateEventID, participateUserID], references: [eventID, userID])

  @@index([participateEventID, participateUserID])
}

enum eventType {
  DAYSOFWEEK
  DATES
}

enum timeZoneList {
    UTC-12:00
    UTC-11:00
    UTC-10:00
    UTC-09:30
    UTC-09:00
    UTC-08:00
    UTC-07:00
    UTC-06:00
    UTC-05:00
    UTC-04:00
    UTC-03:00
    UTC-02:00
    UTC-01:00
    UTCÂ±00:00
    UTC+01:00
    UTC+02:00
    UTC+03:00
    UTC+03:30
    UTC+04:00
    UTC+04:30
    UTC+05:00
    UTC+05:30
    UTC+05:45
    UTC+06:00
    UTC+06:30
    UTC+07:00
    UTC+08:00
    UTC+08:45
    UTC+09:00
    UTC+09:30
    UTC+10:00
    UTC+10:30
    UTC+11:00
    UTC+12:00
    UTC+12:45
    UTC+13:00
    UTC+14:00
}