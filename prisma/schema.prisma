generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(100)
  email         String        @unique @db.VarChar(100)
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  event         Event[]
  account       Account[]
  participate   Participate[]
  Session       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Event {
  id          String        @id @default(uuid())
  occuringAt  DateTime
  ownerID     String        @unique
  address     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  owner       User          @relation(fields: [ownerID], references: [id])
  participant Participate[]
}

model Participate {
  eventID   String
  userID    String
  timeSlots Json
  event     Event  @relation(fields: [eventID], references: [id])
  user      User   @relation(fields: [userID], references: [id])

  @@id([eventID, userID])
  @@index([eventID])
  @@index([userID])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
